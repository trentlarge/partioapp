{"version":3,"sources":["meteor://ðŸ’»app/packages/meteorhacks_search-source/packages/meteorhacks_search-source.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0F","file":"/packages/meteorhacks_search-source.js","sourcesContent":["(function () {\n\n/////////////////////////////////////////////////////////////////////////////////\n//                                                                             //\n// packages/meteorhacks:search-source/lib/server.js                            //\n//                                                                             //\n/////////////////////////////////////////////////////////////////////////////////\n                                                                               //\nSearchSource = {};                                                             // 1\nSearchSource._sources = {};                                                    // 2\nvar bodyParser = Npm.require('body-parser');                                   // 3\n                                                                               // 4\nSearchSource.defineSource = function(name, callback) {                         // 5\n  SearchSource._sources[name] = callback;                                      // 6\n};                                                                             // 7\n                                                                               // 8\nMeteor.methods({                                                               // 9\n  \"search.source\": function(name, query, options) {                            // 10\n    check(name, String);                                                       // 11\n    check(query, Match.OneOf(String, null, undefined));                        // 12\n    check(options, Match.OneOf(Object, null, undefined));                      // 13\n    this.unblock();                                                            // 14\n                                                                               // 15\n    // we need to send the context of the method                               // 16\n    // that's why we use .call instead just invoking the function              // 17\n    return getSourceData.call(this, name, query, options);                     // 18\n  }                                                                            // 19\n});                                                                            // 20\n                                                                               // 21\nvar postRoutes = Picker.filter(function(req, res) {                            // 22\n  return req.method == \"POST\";                                                 // 23\n});                                                                            // 24\n                                                                               // 25\npostRoutes.middleware(bodyParser.text({                                        // 26\n  type: \"text/ejson\"                                                           // 27\n}));                                                                           // 28\n                                                                               // 29\npostRoutes.route('/_search-source', function(params, req, res, next) {         // 30\n  if(req.body) {                                                               // 31\n    var payload = EJSON.parse(req.body);                                       // 32\n    try {                                                                      // 33\n      // supporting the use of Meteor.userId()                                 // 34\n      var data = DDP._CurrentInvocation.withValue({userId: null}, function() { // 35\n        return getSourceData(payload.source, payload.query, payload.options);  // 36\n      });                                                                      // 37\n      sendData(res, null, data);                                               // 38\n    } catch(ex) {                                                              // 39\n      if(ex instanceof Meteor.Error) {                                         // 40\n        var error = { code: ex.error, message: ex.reason };                    // 41\n      } else {                                                                 // 42\n        var error = { message: ex.message };                                   // 43\n      }                                                                        // 44\n      sendData(res, error);                                                    // 45\n    }                                                                          // 46\n  } else {                                                                     // 47\n    next();                                                                    // 48\n  }                                                                            // 49\n});                                                                            // 50\n                                                                               // 51\n                                                                               // 52\nfunction sendData(res, err, data) {                                            // 53\n  var payload = {                                                              // 54\n    error: err,                                                                // 55\n    data: data                                                                 // 56\n  };                                                                           // 57\n                                                                               // 58\n  res.end(EJSON.stringify(payload));                                           // 59\n}                                                                              // 60\n                                                                               // 61\nfunction getSourceData(name, query, options) {                                 // 62\n  var source = SearchSource._sources[name];                                    // 63\n  if(source) {                                                                 // 64\n    return source.call(this, query, options);                                  // 65\n  } else {                                                                     // 66\n    throw new Meteor.Error(404, \"No such search source: \" + name);             // 67\n  }                                                                            // 68\n}                                                                              // 69\n/////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}
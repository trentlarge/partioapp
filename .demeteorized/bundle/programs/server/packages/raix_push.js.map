{"version":3,"sources":["meteor://ðŸ’»app/packages/raix_push/packages/raix_push.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H","file":"/packages/raix_push.js","sourcesContent":["(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                             //\n// packages/raix:push/lib/common/main.js                                                                       //\n//                                                                                                             //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                               //\n// The push object is an event emitter                                                                         // 1\nPush = new EventState();                                                                                       // 2\n                                                                                                               // 3\n// This is the match pattern for tokens                                                                        // 4\n_matchToken = Match.OneOf({ apn: String }, { gcm: String });                                                   // 5\n                                                                                                               // 6\n                                                                                                               // 7\n// Client-side security warnings, used to check options                                                        // 8\ncheckClientSecurity = function(options) {                                                                      // 9\n                                                                                                               // 10\n  // Warn if certificates or keys are added here on client. We dont allow the                                  // 11\n  // user to do this for security reasons.                                                                     // 12\n  if (options.apn && options.apn.certData)                                                                     // 13\n    throw new Error('Push.init: Dont add your APN certificate in client code!');                               // 14\n                                                                                                               // 15\n  if (options.apn && options.apn.keyData)                                                                      // 16\n    throw new Error('Push.init: Dont add your APN key in client code!');                                       // 17\n                                                                                                               // 18\n  if (options.apn && options.apn.passphrase)                                                                   // 19\n    throw new Error('Push.init: Dont add your APN passphrase in client code!');                                // 20\n                                                                                                               // 21\n  if (options.gcm && options.gcm.apiKey)                                                                       // 22\n    throw new Error('Push.init: Dont add your GCM api key in client code!');                                   // 23\n};                                                                                                             // 24\n                                                                                                               // 25\n// DEPRECATED                                                                                                  // 26\nPush.init = function() {                                                                                       // 27\n  console.warn('Push.init have been deprecated in favor of \"config.push.json\" please migrate');                // 28\n};                                                                                                             // 29\n                                                                                                               // 30\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                             //\n// packages/raix:push/lib/common/notifications.js                                                              //\n//                                                                                                             //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                               //\n// Notifications collection                                                                                    // 1\nPush.notifications = new Mongo.Collection('_raix_push_notifications');                                         // 2\n                                                                                                               // 3\nif (Meteor.isServer) {                                                                                         // 4\n  Push.notifications._ensureIndex({createdAt: 1});                                                             // 5\n}                                                                                                              // 6\n                                                                                                               // 7\n// This is a general function to validate that the data added to notifications                                 // 8\n// is in the correct format. If not this function will throw errors                                            // 9\nvar _validateDocument = function(notification) {                                                               // 10\n                                                                                                               // 11\n  // Check the general notification                                                                            // 12\n  check(notification, {                                                                                        // 13\n    from: String,                                                                                              // 14\n    title: String,                                                                                             // 15\n    text: String,                                                                                              // 16\n    badge: Match.Optional(Number),                                                                             // 17\n    sound: Match.Optional(String),                                                                             // 18\n    notId: Match.Optional(Match.Integer),                                                                      // 19\n    query: Match.Optional(String),                                                                             // 20\n    token: Match.Optional(_matchToken),                                                                        // 21\n    tokens: Match.Optional([_matchToken]),                                                                     // 22\n    payload: Match.Optional(Object),                                                                           // 23\n    delayUntil: Match.Optional(Date),                                                                          // 24\n    createdAt: Date,                                                                                           // 25\n    createdBy: Match.OneOf(String, null)                                                                       // 26\n  });                                                                                                          // 27\n                                                                                                               // 28\n  // Make sure a token selector or query have been set                                                         // 29\n  if (!notification.token && !notification.tokens && !notification.query)                                      // 30\n    throw new Error('No token selector or query found');                                                       // 31\n                                                                                                               // 32\n  // If tokens array is set it should not be empty                                                             // 33\n  if (notification.tokens && !notification.tokens.length)                                                      // 34\n    throw new Error('No tokens in array');                                                                     // 35\n};                                                                                                             // 36\n                                                                                                               // 37\nPush.send = function(options) {                                                                                // 38\n  // If on the client we set the user id - on the server we need an option                                     // 39\n  // set or we default to \"<SERVER>\" as the creator of the notification                                        // 40\n  // If current user not set see if we can set it to the logged in user                                        // 41\n  // this will only run on the client if Meteor.userId is available                                            // 42\n  var currentUser = Meteor.isClient && Meteor.userId && Meteor.userId() ||                                     // 43\n          Meteor.isServer && (options.createdBy || '<SERVER>') || null;                                        // 44\n                                                                                                               // 45\n  // Rig the notification object                                                                               // 46\n  var notification = {                                                                                         // 47\n    from: options.from,                                                                                        // 48\n    title: options.title,                                                                                      // 49\n    text: options.text,                                                                                        // 50\n    createdAt: new Date(),                                                                                     // 51\n    createdBy: currentUser                                                                                     // 52\n  };                                                                                                           // 53\n                                                                                                               // 54\n  // Add extra                                                                                                 // 55\n  if (typeof options.payload !== 'undefined') notification.payload = options.payload;                          // 56\n  if (typeof options.badge !== 'undefined') notification.badge = options.badge;                                // 57\n  if (typeof options.sound !== 'undefined') notification.sound = options.sound;                                // 58\n  if (typeof options.notId !== 'undefined') notification.notId = options.notId;                                // 59\n  if (typeof options.delayUntil !== 'undefined') notification.delayUntil = options.delayUntil;                 // 60\n                                                                                                               // 61\n  // Set one token selector, this can be token, array of tokens or query                                       // 62\n  if (options.query) {                                                                                         // 63\n    // Set query to the json string version fixing #43 and #39                                                 // 64\n    notification.query = JSON.stringify(options.query);                                                        // 65\n  } else if (options.token) {                                                                                  // 66\n    // Set token                                                                                               // 67\n    notification.token = options.token;                                                                        // 68\n  } else if (options.tokens) {                                                                                 // 69\n    // Set tokens                                                                                              // 70\n    notification.tokens = options.tokens;                                                                      // 71\n  }                                                                                                            // 72\n                                                                                                               // 73\n  // Validate the notification                                                                                 // 74\n  _validateDocument(notification);                                                                             // 75\n                                                                                                               // 76\n  // Try to add the notification to send, we return an id to keep track                                        // 77\n  return Push.notifications.insert(notification);                                                              // 78\n};                                                                                                             // 79\n                                                                                                               // 80\nPush.allow = function(rules) {                                                                                 // 81\n  if (rules.send) {                                                                                            // 82\n    Push.notifications.allow({                                                                                 // 83\n      'insert': function(userId, notification) {                                                               // 84\n        // Validate the notification                                                                           // 85\n        _validateDocument(notification);                                                                       // 86\n        // Set the user defined \"send\" rules                                                                   // 87\n        return rules.send.apply(this, [userId, notification]);                                                 // 88\n      }                                                                                                        // 89\n    });                                                                                                        // 90\n  }                                                                                                            // 91\n};                                                                                                             // 92\n                                                                                                               // 93\nPush.deny = function(rules) {                                                                                  // 94\n  if (rules.send) {                                                                                            // 95\n    Push.notifications.deny({                                                                                  // 96\n      'insert': function(userId, notification) {                                                               // 97\n        // Validate the notification                                                                           // 98\n        _validateDocument(notification);                                                                       // 99\n        // Set the user defined \"send\" rules                                                                   // 100\n        return rules.send.apply(this, [userId, notification]);                                                 // 101\n      }                                                                                                        // 102\n    });                                                                                                        // 103\n  }                                                                                                            // 104\n};                                                                                                             // 105\n                                                                                                               // 106\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                             //\n// packages/raix:push/lib/server/push.api.js                                                                   //\n//                                                                                                             //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                               //\n/*                                                                                                             // 1\n  A general purpose user CordovaPush                                                                           // 2\n  ios, android, mail, twitter?, facebook?, sms?, snailMail? :)                                                 // 3\n                                                                                                               // 4\n  Phonegap generic :                                                                                           // 5\n  https://github.com/phonegap-build/PushPlugin                                                                 // 6\n */                                                                                                            // 7\n                                                                                                               // 8\n// getText / getBinary                                                                                         // 9\n                                                                                                               // 10\nPush.setBadge = function(id, count) {                                                                          // 11\n    // throw new Error('Push.setBadge not implemented on the server');                                         // 12\n};                                                                                                             // 13\n                                                                                                               // 14\nvar isConfigured = false;                                                                                      // 15\n                                                                                                               // 16\nPush.Configure = function(options) {                                                                           // 17\n    var self = this;                                                                                           // 18\n    // https://npmjs.org/package/apn                                                                           // 19\n                                                                                                               // 20\n    // After requesting the certificate from Apple, export your private key as a .p12 file and download the .cer file from the iOS Provisioning Portal.\n                                                                                                               // 22\n    // gateway.push.apple.com, port 2195                                                                       // 23\n    // gateway.sandbox.push.apple.com, port 2195                                                               // 24\n                                                                                                               // 25\n    // Now, in the directory containing cert.cer and key.p12 execute the following commands to generate your .pem files:\n    // $ openssl x509 -in cert.cer -inform DER -outform PEM -out cert.pem                                      // 27\n    // $ openssl pkcs12 -in key.p12 -out key.pem -nodes                                                        // 28\n                                                                                                               // 29\n    // Block multiple calls                                                                                    // 30\n    if (isConfigured)                                                                                          // 31\n      throw new Error('Push.Configure should not be called more than once!');                                  // 32\n                                                                                                               // 33\n    isConfigured = true;                                                                                       // 34\n                                                                                                               // 35\n    // Add debug info                                                                                          // 36\n    if (Push.debug) console.log('Push.Configure', options);                                                    // 37\n                                                                                                               // 38\n    // This function is called when a token is replaced on a device - normally                                 // 39\n    // this should not happen, but if it does we should take action on it                                      // 40\n    _replaceToken = function(currentToken, newToken) {                                                         // 41\n        // console.log('Replace token: ' + currentToken + ' -- ' + newToken);                                  // 42\n        // If the server gets a token event its passing in the current token and                               // 43\n        // the new value - if new value is undefined this empty the token                                      // 44\n        self.emitState('token', currentToken, newToken);                                                       // 45\n    };                                                                                                         // 46\n                                                                                                               // 47\n    // Rig the removeToken callback                                                                            // 48\n    _removeToken = function(token) {                                                                           // 49\n        // console.log('Remove token: ' + token);                                                              // 50\n        // Invalidate the token                                                                                // 51\n        self.emitState('token', token, null);                                                                  // 52\n    };                                                                                                         // 53\n                                                                                                               // 54\n                                                                                                               // 55\n    if (options.apn) {                                                                                         // 56\n        if (Push.debug) console.log('Push: APN configured');                                                   // 57\n                                                                                                               // 58\n        // Allow production to be a general option for push notifications                                      // 59\n        if (options.production === !!options.production)                                                       // 60\n          options.apn.production = options.production;                                                         // 61\n                                                                                                               // 62\n        // Give the user warnings about development settings                                                   // 63\n        if (options.apn.development) {                                                                         // 64\n          // This flag is normally set by the configuration file                                               // 65\n          console.warn('WARNING: Push APN is using development key and certificate');                          // 66\n        } else {                                                                                               // 67\n          // We check the apn gateway i the options, we could risk shipping                                    // 68\n          // server into production while using the production configuration.                                  // 69\n          // On the other hand we could be in development but using the production                             // 70\n          // configuration. And finally we could have configured an unknown apn                                // 71\n          // gateway (this could change in the future - but a warning about typos                              // 72\n          // can save hours of debugging)                                                                      // 73\n          //                                                                                                   // 74\n          // Warn about gateway configurations - it's more a guide                                             // 75\n          if (options.apn.gateway) {                                                                           // 76\n                                                                                                               // 77\n              if (options.apn.gateway == 'gateway.sandbox.push.apple.com') {                                   // 78\n                  // Using the development sandbox                                                             // 79\n                  console.warn('WARNING: Push APN is in development mode');                                    // 80\n              } else if (options.apn.gateway == 'gateway.push.apple.com') {                                    // 81\n                  // In production - but warn if we are running on localhost                                   // 82\n                  if (/http:\\/\\/localhost/.test(Meteor.absoluteUrl())) {                                       // 83\n                      console.warn('WARNING: Push APN is configured to production mode - but server is running from localhost');\n                  }                                                                                            // 85\n              } else {                                                                                         // 86\n                  // Warn about gateways we dont know about                                                    // 87\n                  console.warn('WARNING: Push APN unkown gateway \"' + options.apn.gateway + '\"');              // 88\n              }                                                                                                // 89\n                                                                                                               // 90\n          } else {                                                                                             // 91\n              if (options.apn.production) {                                                                    // 92\n                  if (/http:\\/\\/localhost/.test(Meteor.absoluteUrl())) {                                       // 93\n                      console.warn('WARNING: Push APN is configured to production mode - but server is running from localhost');\n                  }                                                                                            // 95\n              } else {                                                                                         // 96\n                  console.warn('WARNING: Push APN is in development mode');                                    // 97\n              }                                                                                                // 98\n          }                                                                                                    // 99\n                                                                                                               // 100\n        }                                                                                                      // 101\n                                                                                                               // 102\n        // Check certificate data                                                                              // 103\n        if (!options.apn['certData'] || !options.apn['certData'].length)                                       // 104\n            console.error('ERROR: Push server could not find certData');                                       // 105\n                                                                                                               // 106\n        // Check key data                                                                                      // 107\n        if (!options.apn['keyData'] || !options.apn['keyData'].length)                                         // 108\n            console.error('ERROR: Push server could not find keyData');                                        // 109\n                                                                                                               // 110\n        // Rig apn connection                                                                                  // 111\n        var apn = Npm.require('apn');                                                                          // 112\n        var apnConnection = new apn.Connection( options.apn );                                                 // 113\n                                                                                                               // 114\n                                                                                                               // 115\n        // XXX: should we do a test of the connection? It would be nice to know                                // 116\n        // That the server/certificates/network are correct configured                                         // 117\n                                                                                                               // 118\n        // apnConnection.connect().then(function() {                                                           // 119\n        //     console.info('CHECK: Push APN connection OK');                                                  // 120\n        // }, function(err) {                                                                                  // 121\n        //     console.warn('CHECK: Push APN connection FAILURE');                                             // 122\n        // });                                                                                                 // 123\n        // Note: the above code spoils the connection - investigate how to                                     // 124\n        // shutdown/close it.                                                                                  // 125\n                                                                                                               // 126\n        self.sendAPN = function(userToken, notification) {                                                     // 127\n            // console.log('sendAPN', notification.from, userToken, notification.title, notification.text, notification.badge, notification.priority);\n            var priority = (notification.priority || notification.priority === 0)? notification.priority : 10; // 129\n                                                                                                               // 130\n            var myDevice = new apn.Device(userToken);                                                          // 131\n                                                                                                               // 132\n            var note = new apn.Notification();                                                                 // 133\n                                                                                                               // 134\n            note.expiry = Math.floor(Date.now() / 1000) + 3600; // Expires 1 hour from now.                    // 135\n            if (typeof notification.badge !== 'undefined') note.badge = notification.badge;                    // 136\n            if (typeof notification.sound !== 'undefined') note.sound = notification.sound;                    // 137\n                                                                                                               // 138\n            // adds category support for iOS8 custom actions as described here:                                // 139\n            // https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/Chapters/IPhoneOSClientImp.html#//apple_ref/doc/uid/TP40008194-CH103-SW36\n            if (typeof notification.category !== 'undefined') note.category = notification.category;           // 141\n                                                                                                               // 142\n            note.alert = notification.text;                                                                    // 143\n            // Allow the user to set payload data                                                              // 144\n            note.payload = (notification.payload) ? { ejson: EJSON.stringify(notification.payload) } : {};     // 145\n                                                                                                               // 146\n            note.payload.messageFrom = notification.from;                                                      // 147\n            note.priority = priority;                                                                          // 148\n                                                                                                               // 149\n            // console.log('I:Send message to: ' + userToken + ' count=' + count);                             // 150\n                                                                                                               // 151\n            apnConnection.pushNotification(note, myDevice);                                                    // 152\n                                                                                                               // 153\n        };                                                                                                     // 154\n                                                                                                               // 155\n                                                                                                               // 156\n        var initFeedback = function() {                                                                        // 157\n            var apn = Npm.require('apn');                                                                      // 158\n            // console.log('Init feedback');                                                                   // 159\n            var feedbackOptions = {                                                                            // 160\n                \"batchFeedback\": true,                                                                         // 161\n                \"interval\": 1000,                                                                              // 162\n                'address': 'feedback.push.apple.com'                                                           // 163\n            };                                                                                                 // 164\n                                                                                                               // 165\n            var feedback = new apn.Feedback(feedbackOptions);                                                  // 166\n            feedback.on(\"feedback\", function(devices) {                                                        // 167\n                devices.forEach(function(item) {                                                               // 168\n                    // Do something with item.device and item.time;                                            // 169\n                    // console.log('A:PUSH FEEDBACK ' + item.device + ' - ' + item.time);                      // 170\n                    // The app is most likely removed from the device, we should                               // 171\n                    // remove the token                                                                        // 172\n                    _removeToken({ apn: item.device});                                                         // 173\n                });                                                                                            // 174\n            });                                                                                                // 175\n        };                                                                                                     // 176\n                                                                                                               // 177\n        // Init feedback from apn server                                                                       // 178\n        // This will help keep the appCollection up-to-date, it will help update                               // 179\n        // and remove token from appCollection.                                                                // 180\n        initFeedback();                                                                                        // 181\n                                                                                                               // 182\n    } // EO ios notification                                                                                   // 183\n                                                                                                               // 184\n    if (options.gcm && options.gcm.apiKey) {                                                                   // 185\n        if (Push.debug) console.log('GCM configured');                                                         // 186\n        //self.sendGCM = function(options.from, userTokens, options.title, options.text, options.badge, options.priority) {\n        self.sendGCM = function(userTokens, notification) {                                                    // 188\n            // Make sure userTokens are an array of strings                                                    // 189\n            if (userTokens === ''+userTokens) userTokens = [userTokens];                                       // 190\n                                                                                                               // 191\n            // Check if any tokens in there to send                                                            // 192\n            if (!userTokens.length) {                                                                          // 193\n                if (Push.debug) console.log('sendGCM no push tokens found');                                   // 194\n                return;                                                                                        // 195\n            }                                                                                                  // 196\n                                                                                                               // 197\n            if (Push.debug) console.log('sendGCM', userTokens, notification);                                  // 198\n                                                                                                               // 199\n            var gcm = Npm.require('node-gcm');                                                                 // 200\n            var Fiber = Npm.require('fibers');                                                                 // 201\n                                                                                                               // 202\n            // Allow user to set payload                                                                       // 203\n            var data = (notification.payload) ? { ejson: EJSON.stringify(notification.payload) } : {};         // 204\n                                                                                                               // 205\n            data.title = notification.title;                                                                   // 206\n            data.message = notification.text;                                                                  // 207\n                                                                                                               // 208\n            // Set extra details                                                                               // 209\n            if (typeof notification.badge !== 'undefined') data.msgcnt = notification.badge;                   // 210\n            if (typeof notification.sound !== 'undefined') data.soundname = notification.sound;                // 211\n            if (typeof notification.notId !== 'undefined') data.notId = notification.notId;                    // 212\n                                                                                                               // 213\n            //var message = new gcm.Message();                                                                 // 214\n            var message = new gcm.Message({                                                                    // 215\n                collapseKey: notification.from,                                                                // 216\n            //    delayWhileIdle: true,                                                                        // 217\n            //    timeToLive: 4,                                                                               // 218\n            //    restricted_package_name: 'dk.gi2.app'                                                        // 219\n                data: data                                                                                     // 220\n            });                                                                                                // 221\n                                                                                                               // 222\n            if (Push.debug) console.log('Create GCM Sender using \"' + options.gcm.apiKey + '\"');               // 223\n            var sender = new gcm.Sender(options.gcm.apiKey);                                                   // 224\n                                                                                                               // 225\n            _.each(userTokens, function(value, key) {                                                          // 226\n                if (Push.debug) console.log('A:Send message to: ' + value);                                    // 227\n            });                                                                                                // 228\n                                                                                                               // 229\n            /*message.addData('title', title);                                                                 // 230\n            message.addData('message', text);                                                                  // 231\n            message.addData('msgcnt', '1');                                                                    // 232\n            message.collapseKey = 'sitDrift';                                                                  // 233\n            message.delayWhileIdle = true;                                                                     // 234\n            message.timeToLive = 3;*/                                                                          // 235\n                                                                                                               // 236\n            // /**                                                                                             // 237\n            //  * Parameters: message-literal, userTokens-array, No. of retries, callback-function             // 238\n            //  */                                                                                             // 239\n                                                                                                               // 240\n            var userToken = (userTokens.length === 1)?userTokens[0]:null;                                      // 241\n                                                                                                               // 242\n            sender.send(message, userTokens, 5, function (err, result) {                                       // 243\n                if (err) {                                                                                     // 244\n                    if (Push.debug) console.log('ANDROID ERROR: result of sender: ' + result);                 // 245\n                } else {                                                                                       // 246\n                    if (result == null) {                                                                      // 247\n                      if (Push.debug) console.log('ANDROID: Result of sender is null');                        // 248\n                      return;                                                                                  // 249\n                    }                                                                                          // 250\n                    if (Push.debug) console.log('ANDROID: Result of sender: ' + JSON.stringify(result));       // 251\n                    if (result.canonical_ids === 1 && userToken) {                                             // 252\n                                                                                                               // 253\n                        // This is an old device, token is replaced                                            // 254\n                        Fiber(function(self) {                                                                 // 255\n                            // Run in fiber                                                                    // 256\n                            try {                                                                              // 257\n                                self.callback(self.oldToken, self.newToken);                                   // 258\n                            } catch(err) {                                                                     // 259\n                                                                                                               // 260\n                            }                                                                                  // 261\n                                                                                                               // 262\n                        }).run({                                                                               // 263\n                            oldToken: { gcm: userToken },                                                      // 264\n                            newToken: { gcm: result.results[0].registration_id },                              // 265\n                            callback: _replaceToken                                                            // 266\n                        });                                                                                    // 267\n                        //_replaceToken({ gcm: userToken }, { gcm: result.results[0].registration_id });       // 268\n                                                                                                               // 269\n                    }                                                                                          // 270\n                    // We cant send to that token - might not be registred                                     // 271\n                    // ask the user to remove the token from the list                                          // 272\n                    if (result.failure !== 0 && userToken) {                                                   // 273\n                                                                                                               // 274\n                        // This is an old device, token is replaced                                            // 275\n                        Fiber(function(self) {                                                                 // 276\n                            // Run in fiber                                                                    // 277\n                            try {                                                                              // 278\n                                self.callback(self.token);                                                     // 279\n                            } catch(err) {                                                                     // 280\n                                                                                                               // 281\n                            }                                                                                  // 282\n                                                                                                               // 283\n                        }).run({                                                                               // 284\n                            token: { gcm: userToken },                                                         // 285\n                            callback: _removeToken                                                             // 286\n                        });                                                                                    // 287\n                        //_replaceToken({ gcm: userToken }, { gcm: result.results[0].registration_id });       // 288\n                                                                                                               // 289\n                    }                                                                                          // 290\n                                                                                                               // 291\n                }                                                                                              // 292\n            });                                                                                                // 293\n            // /** Use the following line if you want to send the message without retries                      // 294\n            // sender.sendNoRetry(message, userTokens, function (result) {                                     // 295\n            //     console.log('ANDROID: ' + JSON.stringify(result));                                          // 296\n            // });                                                                                             // 297\n            // **/                                                                                             // 298\n        }; // EO sendAndroid                                                                                   // 299\n                                                                                                               // 300\n    } // EO Android                                                                                            // 301\n                                                                                                               // 302\n    // Universal send function                                                                                 // 303\n    var _querySend = function(query, options) {                                                                // 304\n                                                                                                               // 305\n      var countApn = [];                                                                                       // 306\n      var countGcm = [];                                                                                       // 307\n                                                                                                               // 308\n        Push.appCollection.find(query).forEach(function(app) {                                                 // 309\n                                                                                                               // 310\n          if (Push.debug) console.log('send to token', app.token);                                             // 311\n                                                                                                               // 312\n            if (app.token.apn) {                                                                               // 313\n              countApn.push(app._id);                                                                          // 314\n                // Send to APN                                                                                 // 315\n                if (self.sendAPN) self.sendAPN(app.token.apn, options);                                        // 316\n                                                                                                               // 317\n            } else if (app.token.gcm) {                                                                        // 318\n              countGcm.push(app._id);                                                                          // 319\n                                                                                                               // 320\n                // Send to GCM                                                                                 // 321\n                // We do support multiple here - so we should construct an array                               // 322\n                // and send it bulk - Investigate limit count of id's                                          // 323\n                if (self.sendGCM) self.sendGCM(app.token.gcm, options);                                        // 324\n                                                                                                               // 325\n            } else {                                                                                           // 326\n                throw new Error('Push.send got a faulty query');                                               // 327\n            }                                                                                                  // 328\n                                                                                                               // 329\n        });                                                                                                    // 330\n                                                                                                               // 331\n        if (Push.debug) {                                                                                      // 332\n                                                                                                               // 333\n          console.log('Push: Sent message \"' + options.title + '\" to ' + countApn.length + ' ios apps ' + countGcm.length + ' android apps');\n                                                                                                               // 335\n          // Add some verbosity about the send result, making sure the developer                               // 336\n          // understands what just happened.                                                                   // 337\n          if (!countApn.length && !countGcm.length) {                                                          // 338\n            if (Push.appCollection.find().count() == 0) {                                                      // 339\n              console.log('Push, GUIDE: The \"Push.appCollection\" is empty - No clients have registred on the server yet...');\n            }                                                                                                  // 341\n          } else if (!countApn.length) {                                                                       // 342\n            if (Push.appCollection.find({ 'token.apn': { $exists: true } }).count() == 0) {                    // 343\n              console.log('Push, GUIDE: The \"Push.appCollection\" - No APN clients have registred on the server yet...');\n            }                                                                                                  // 345\n          } else if (!countGcm.length) {                                                                       // 346\n            if (Push.appCollection.find({ 'token.gcm': { $exists: true } }).count() == 0) {                    // 347\n              console.log('Push, GUIDE: The \"Push.appCollection\" - No GCM clients have registred on the server yet...');\n            }                                                                                                  // 349\n          }                                                                                                    // 350\n                                                                                                               // 351\n        }                                                                                                      // 352\n                                                                                                               // 353\n        return {                                                                                               // 354\n          apn: countApn,                                                                                       // 355\n          gcm: countGcm                                                                                        // 356\n        };                                                                                                     // 357\n    };                                                                                                         // 358\n                                                                                                               // 359\n    self.serverSend = function(options) {                                                                      // 360\n      options = options ||Â { badge: 0 };                                                                       // 361\n      var query;                                                                                               // 362\n                                                                                                               // 363\n      // Check basic options                                                                                   // 364\n      if (options.from !== ''+options.from)                                                                    // 365\n        throw new Error('Push.send: option \"from\" not a string');                                              // 366\n                                                                                                               // 367\n      if (options.title !== ''+options.title)                                                                  // 368\n        throw new Error('Push.send: option \"title\" not a string');                                             // 369\n                                                                                                               // 370\n      if (options.text !== ''+options.text)                                                                    // 371\n        throw new Error('Push.send: option \"text\" not a string');                                              // 372\n                                                                                                               // 373\n      if (options.token || options.tokens) {                                                                   // 374\n                                                                                                               // 375\n        // The user set one token or array of tokens                                                           // 376\n        var tokenList = (options.token)? [options.token] : options.tokens;                                     // 377\n                                                                                                               // 378\n        if (Push.debug) console.log('Push: Send message \"' + options.title + '\" via token(s)', tokenList);     // 379\n                                                                                                               // 380\n        query = {                                                                                              // 381\n          $or: [                                                                                               // 382\n              // XXX: Test this query: can we hand in a list of push tokens?                                   // 383\n              { token: { $in: tokenList } },                                                                   // 384\n              // XXX: Test this query: does this work on app id?                                               // 385\n              { $and: [                                                                                        // 386\n                  { _in: { $in: tokenList } }, // one of the app ids                                           // 387\n                  { $or: [                                                                                     // 388\n                      { 'token.apn': { $exists: true }  }, // got apn token                                    // 389\n                      { 'token.gcm': { $exists: true }  }  // got gcm token                                    // 390\n                  ]}                                                                                           // 391\n              ]}                                                                                               // 392\n          ]                                                                                                    // 393\n        };                                                                                                     // 394\n                                                                                                               // 395\n      } else if (options.query) {                                                                              // 396\n                                                                                                               // 397\n        if (Push.debug) console.log('Push: Send message \"' + options.title + '\" via query', options.query);    // 398\n                                                                                                               // 399\n        query = {                                                                                              // 400\n          $and: [                                                                                              // 401\n              options.query, // query object                                                                   // 402\n              { $or: [                                                                                         // 403\n                  { 'token.apn': { $exists: true }  }, // got apn token                                        // 404\n                  { 'token.gcm': { $exists: true }  }  // got gcm token                                        // 405\n              ]}                                                                                               // 406\n          ]                                                                                                    // 407\n        };                                                                                                     // 408\n      }                                                                                                        // 409\n                                                                                                               // 410\n                                                                                                               // 411\n      if (query) {                                                                                             // 412\n                                                                                                               // 413\n        // Convert to querySend and return status                                                              // 414\n        return _querySend(query, options)                                                                      // 415\n                                                                                                               // 416\n      } else {                                                                                                 // 417\n        throw new Error('Push.send: please set option \"token\"/\"tokens\" or \"query\"');                           // 418\n      }                                                                                                        // 419\n                                                                                                               // 420\n    };                                                                                                         // 421\n                                                                                                               // 422\n                                                                                                               // 423\n    // This interval will allow only one notification to be sent at a time, it                                 // 424\n    // will check for new notifications at every `options.sendInterval`                                        // 425\n    // (default interval is 15000 ms)                                                                          // 426\n    //                                                                                                         // 427\n    // It looks in notifications collection to see if theres any pending                                       // 428\n    // notifications, if so it will try to reserve the pending notification.                                   // 429\n    // If successfully reserved the send is started.                                                           // 430\n    //                                                                                                         // 431\n    // If notification.query is type string, it's assumed to be a json string                                  // 432\n    // version of the query selector. Making it able to carry `$` properties in                                // 433\n    // the mongo collection.                                                                                   // 434\n    //                                                                                                         // 435\n    // Pr. default notifications are removed from the collection after send have                               // 436\n    // completed. Setting `options.keepNotifications` will update and keep the                                 // 437\n    // notification eg. if needed for historical reasons.                                                      // 438\n    //                                                                                                         // 439\n    // After the send have completed a \"send\" event will be emitted with a                                     // 440\n    // status object containing notification id and the send result object.                                    // 441\n    //                                                                                                         // 442\n    var isSendingNotification = false;                                                                         // 443\n                                                                                                               // 444\n    Meteor.setInterval(function() {                                                                            // 445\n                                                                                                               // 446\n        if (isSendingNotification) {                                                                           // 447\n            return;                                                                                            // 448\n        }                                                                                                      // 449\n        // Set send fence                                                                                      // 450\n        isSendingNotification = true;                                                                          // 451\n                                                                                                               // 452\n        var countSent = 0;                                                                                     // 453\n        var batchSize = options.sendBatchSize || 1;                                                            // 454\n                                                                                                               // 455\n        // Find notifications that are not being or already sent                                               // 456\n        var pendingNotifications = Push.notifications.find({ $and: [                                           // 457\n              // Message is not sent                                                                           // 458\n              { sent : { $ne: true } },                                                                        // 459\n              // And not being sent by other instances                                                         // 460\n              { sending: { $ne: true } },                                                                      // 461\n              // And not queued for future                                                                     // 462\n              { $or: [ { delayUntil: { $exists: false } }, { delayUntil:  { $lte: new Date() } } ] }           // 463\n\t\t      ]}, {                                                                                                  // 464\n            // Sort by created date                                                                            // 465\n            sort: { createdAt: 1 },                                                                            // 466\n            limit: batchSize                                                                                   // 467\n          });                                                                                                  // 468\n                                                                                                               // 469\n        pendingNotifications.forEach(function(notification) {                                                  // 470\n            // Reserve notification                                                                            // 471\n            var reserved = Push.notifications.update({ $and: [                                                 // 472\n              // Try to reserve the current notification                                                       // 473\n              { _id: notification._id },                                                                       // 474\n              // Make sure no other instances have reserved it                                                 // 475\n              { sending: { $ne: true } }                                                                       // 476\n            ]}, {                                                                                              // 477\n              $set: {                                                                                          // 478\n                // Try to reserve                                                                              // 479\n                sending: true                                                                                  // 480\n              }                                                                                                // 481\n            });                                                                                                // 482\n                                                                                                               // 483\n            // Make sure we only handle notifications reserved by this                                         // 484\n            // instance                                                                                        // 485\n            if (reserved) {                                                                                    // 486\n                                                                                                               // 487\n              // Check if query is set and is type String                                                      // 488\n              if (notification.query && notification.query === ''+notification.query) {                        // 489\n                try {                                                                                          // 490\n                  // The query is in string json format - we need to parse it                                  // 491\n                  notification.query = JSON.parse(notification.query);                                         // 492\n                } catch(err) {                                                                                 // 493\n                  // Did the user tamper with this??                                                           // 494\n                  throw new Error('Push: Error while parsing query string, Error: ' + err.message);            // 495\n                }                                                                                              // 496\n              }                                                                                                // 497\n                                                                                                               // 498\n              // Send the notification                                                                         // 499\n              var result = Push.serverSend(notification);                                                      // 500\n                                                                                                               // 501\n              if (!options.keepNotifications) {                                                                // 502\n                  // Pr. Default we will remove notifications                                                  // 503\n                  Push.notifications.remove({ _id: notification._id });                                        // 504\n              } else {                                                                                         // 505\n                                                                                                               // 506\n                  // Update the notification                                                                   // 507\n                  Push.notifications.update({ _id: notification._id }, {                                       // 508\n                      $set: {                                                                                  // 509\n                        // Mark as sent                                                                        // 510\n                        sent: true,                                                                            // 511\n                        // Set the sent date                                                                   // 512\n                        sentAt: new Date(),                                                                    // 513\n                        // Count                                                                               // 514\n                        count: result,                                                                         // 515\n                        // Not being sent anymore                                                              // 516\n                        sending: false                                                                         // 517\n                      }                                                                                        // 518\n                  });                                                                                          // 519\n                                                                                                               // 520\n              }                                                                                                // 521\n                                                                                                               // 522\n              // Emit the send                                                                                 // 523\n              self.emit('send', { notification: notification._id, result: result });                           // 524\n                                                                                                               // 525\n            } // Else could not reserve                                                                        // 526\n                                                                                                               // 527\n        }); // EO forEach                                                                                      // 528\n                                                                                                               // 529\n        // Remove the send fence                                                                               // 530\n        isSendingNotification = false;                                                                         // 531\n    }, options.sendInterval || 15000); // Default every 15th sec                                               // 532\n                                                                                                               // 533\n};                                                                                                             // 534\n                                                                                                               // 535\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                             //\n// packages/raix:push/lib/server/server.js                                                                     //\n//                                                                                                             //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                               //\nPush.appCollection = new Mongo.Collection('_raix_push_app_tokens');                                            // 1\n                                                                                                               // 2\nPush.addListener('token', function(currentToken, value) {                                                      // 3\n  if (value) {                                                                                                 // 4\n    // Update the token for app                                                                                // 5\n    Push.appCollection.update({ token: currentToken }, { $set: { token: value } }, { multi: true });           // 6\n  } else if (value === null) {                                                                                 // 7\n    // Remove the token for app                                                                                // 8\n    Push.appCollection.update({ token: currentToken }, { $unset: { token: true } }, { multi: true });          // 9\n  }                                                                                                            // 10\n});                                                                                                            // 11\n                                                                                                               // 12\nMeteor.methods({                                                                                               // 13\n  'raix:push-update': function(options) {                                                                      // 14\n    if (Push.debug) console.log('Push: Got push token from app:', options);                                    // 15\n                                                                                                               // 16\n    check(options, {                                                                                           // 17\n      id: Match.Optional(String),                                                                              // 18\n      token: _matchToken,                                                                                      // 19\n      appName: String,                                                                                         // 20\n      userId: Match.OneOf(String, null),                                                                       // 21\n      metadata: Match.Optional(Object)                                                                         // 22\n    });                                                                                                        // 23\n                                                                                                               // 24\n    // The if user id is set then user id should match on client and connection                                // 25\n    if (options.userId && options.userId !== this.userId) {                                                    // 26\n      throw new Meteor.Error(403, 'Forbidden access');                                                         // 27\n    }                                                                                                          // 28\n                                                                                                               // 29\n    var doc;                                                                                                   // 30\n                                                                                                               // 31\n    // lookup app by id if one was included                                                                    // 32\n    if (options.id) {                                                                                          // 33\n      doc = Push.appCollection.findOne({ _id: options.id });                                                   // 34\n    }                                                                                                          // 35\n                                                                                                               // 36\n    // No doc was found - we check the database to see if                                                      // 37\n    // we can find a match for the app via token and appName                                                   // 38\n    if (!doc) doc = Push.appCollection.findOne({                                                               // 39\n      $and: [                                                                                                  // 40\n        { token: options.token },     // Match token                                                           // 41\n        { appName: options.appName }, // Match appName                                                         // 42\n        { token: { $exists: true } }  // Make sure token exists                                                // 43\n      ]                                                                                                        // 44\n    });                                                                                                        // 45\n                                                                                                               // 46\n    // if we could not find the id or token then create it                                                     // 47\n    if (!doc) {                                                                                                // 48\n      // Rig default doc                                                                                       // 49\n      doc = {                                                                                                  // 50\n        token: options.token,                                                                                  // 51\n        appName: options.appName,                                                                              // 52\n        userId: options.userId,                                                                                // 53\n        createdAt: new Date(),                                                                                 // 54\n        updatedAt: new Date()                                                                                  // 55\n      };                                                                                                       // 56\n                                                                                                               // 57\n      if (options.id) {                                                                                        // 58\n        // XXX: We might want to check the id - Why isnt there a match for id                                  // 59\n        // in the Meteor check... Normal length 17 (could be larger), and                                      // 60\n        // numbers+letters are used in Random.id() with exception of 0 and 1                                   // 61\n        doc._id = options.id;                                                                                  // 62\n        // The user wanted us to use a specific id, we didn't find this while                                  // 63\n        // searching. The client could depend on the id eg. as reference so                                    // 64\n        // we respect this and try to create a document with the selected id;                                  // 65\n        Push.appCollection._collection.insert(doc);                                                            // 66\n      } else {                                                                                                 // 67\n        // Get the id from insert                                                                              // 68\n        doc._id = Push.appCollection.insert(doc);                                                              // 69\n      }                                                                                                        // 70\n    } else {                                                                                                   // 71\n      // We found the app so update the updatedAt and set the token                                            // 72\n      Push.appCollection.update({ _id: doc._id }, {                                                            // 73\n        $set: {                                                                                                // 74\n          updatedAt: new Date(),                                                                               // 75\n          token: options.token                                                                                 // 76\n        }                                                                                                      // 77\n      });                                                                                                      // 78\n    }                                                                                                          // 79\n                                                                                                               // 80\n    if (doc && Push.debug) {                                                                                   // 81\n      console.log('Push: updated', doc);                                                                       // 82\n    }                                                                                                          // 83\n                                                                                                               // 84\n    if (!doc) {                                                                                                // 85\n      throw new Meteor.Error(500, 'setPushToken could not create record');                                     // 86\n    }                                                                                                          // 87\n    // Return the id we want to use                                                                            // 88\n    return doc._id;                                                                                            // 89\n  },                                                                                                           // 90\n  'raix:push-setuser': function(id) {                                                                          // 91\n    check(id, String);                                                                                         // 92\n    // We update the appCollection id setting the Meteor.userId                                                // 93\n    var found = Push.appCollection.update({ _id: id }, { $set: { userId: this.userId } });                     // 94\n                                                                                                               // 95\n    // Note that the app id might not exist because no token is set yet.                                       // 96\n    // We do create the new app id for the user since we might store additional                                // 97\n    // metadata for the app / user                                                                             // 98\n                                                                                                               // 99\n    // If id not found then create it?                                                                         // 100\n    // We dont, its better to wait until the user wants to                                                     // 101\n    // store metadata or token - We could end up with unused data in the                                       // 102\n    // collection at every app re-install / update                                                             // 103\n    //                                                                                                         // 104\n    // The user could store some metadata in appCollectin but only if they                                     // 105\n    // have created the app and provided a token.                                                              // 106\n    // If not the metadata should be set via ground:db                                                         // 107\n                                                                                                               // 108\n    return !!found;                                                                                            // 109\n  },                                                                                                           // 110\n  'raix:push-metadata': function(data) {                                                                       // 111\n    check(data, {                                                                                              // 112\n      id: String,                                                                                              // 113\n      metadata: Object                                                                                         // 114\n    });                                                                                                        // 115\n                                                                                                               // 116\n    // Set the metadata                                                                                        // 117\n    var found = Push.appCollection.update({ _id: data.id }, { $set: { metadata: data.metadata } });            // 118\n                                                                                                               // 119\n    return !!found;                                                                                            // 120\n  }                                                                                                            // 121\n});                                                                                                            // 122\n                                                                                                               // 123\n                                                                                                               // 124\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}
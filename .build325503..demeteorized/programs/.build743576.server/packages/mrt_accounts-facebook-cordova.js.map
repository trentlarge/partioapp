{"version":3,"file":"/packages/mrt:accounts-facebook-cordova.js","sources":["mrt:accounts-facebook-cordova/facebook_server.js","mrt:accounts-facebook-cordova/facebook.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,sD;AACA,6B;AACA,qB;AACA,G;;AAEA,2C;AACA,uD;AACA,mE;;AAEA,8B;;AAEA,qB;AACA,0C;AACA,4D;AACA,I;;AAEA,yD;AACA,wE;;AAEA,6C;AACA,gC;;AAEA,8B;AACA,sF;AACA,2C;;AAEA,0C;;AAEA,0F;;AAEA,G;;AAEA,0C;AACA,O;AACA,sD;AACA,iD;AACA,iB;AACA,uF;AACA,6C;AACA,G;AACA,E;;AAEA,gD;AACA,O;AACA,mF;AACA,0D;AACA,iB;AACA,uF;AACA,6C;AACA,G;AACA,E;;;;;;;;;;;;;;;;;;AClDA,2C;;AAEA,sB;;AAEA,0D;AACA,yC;AACA,sD;AACA,yB;AACA,qB;AACA,K;;AAEA,sG;;AAEA,0C;AACA,0B;;AAEA,gC;AACA,gC;AACA,8B;AACA,S;AACA,K;;AAEA,yE;AACA,4C;AACA,8B;AACA,+C;AACA,oF;AACA,+B;AACA,4D;AACA,c;AACA,kB;AACA,qC;AACA,W;AACA,U;AACA,oD;AACA,Q;AACA,Y;AACA,6E;AACA,K;AACA,I;;AAEA,Q;;AAEA,yB;AACA,iC;AACA,uC;AACA,wC;;AAEA,gD;AACA,yB;AACA,O;;AAEA,gD;AACA,0B;AACA,4C;AACA,6C;AACA,O;;AAEA,mC;AACA,0E;AACA,+D;AACA,kG;AACA,mC;AACA,6C;AACA,sB;AACA,wD;AACA,wF;AACA,O;AACA,O;AACA,I;AACA,U;AACA,0F;AACA,G;AACA,C","sourcesContent":["Accounts.registerLoginHandler(function(loginRequest) {\n  if(!loginRequest.cordova) {\n    return undefined;\n  }\n\n  loginRequest = loginRequest.authResponse;\n  var identity = getIdentity(loginRequest.accessToken);\n  var profilePicture = getProfilePicture(loginRequest.accessToken);\n\n  console.log(profilePicture);\n\n  var serviceData = {\n    accessToken: loginRequest.accessToken,\n    expiresAt: (+new Date) + (1000 * loginRequest.expiresIn)\n  };\n\n  var whitelisted = ['id', 'email', 'name', 'first_name',\n      'last_name', 'link', 'username', 'gender', 'locale', 'age_range'];\n\n  var fields = _.pick(identity, whitelisted);\n  _.extend(serviceData, fields);\n\n  var options = {profile: {}};\n  var profileFields = _.pick(identity, Meteor.settings.public.facebook.profileFields);\n  _.extend(options.profile, profileFields);\n\n  options.profile.avatar = profilePicture;\n\n  return Accounts.updateOrCreateUserFromExternalService(\"facebook\", serviceData, options);\n\n});\n\nvar getIdentity = function (accessToken) {\n  try {\n    return HTTP.get(\"https://graph.facebook.com/me\", {\n      params: {access_token: accessToken}}).data;\n  } catch (err) {\n    throw _.extend(new Error(\"Failed to fetch identity from Facebook. \" + err.message),\n                   {response: err.response});\n  }\n};\n\nvar getProfilePicture = function (accessToken) {\n  try {\n    return HTTP.get(\"https://graph.facebook.com/v2.0/me/picture/?redirect=false\", {\n      params: {access_token: accessToken}}).data.data.url;\n  } catch (err) {\n    throw _.extend(new Error(\"Failed to fetch identity from Facebook. \" + err.message),\n                   {response: err.response});\n  }\n};","Accounts.oauth.registerService('facebook');\n\nif (Meteor.isClient) {\n\n  Meteor.loginWithFacebook = function(options, callback) {\n    // support a callback without options\n    if (! callback && typeof options === \"function\") {\n      callback = options;\n      options = null;\n    }\n\n    var credentialRequestCompleteCallback = Accounts.oauth.credentialRequestCompleteHandler(callback);\n\n    var fbLoginSuccess = function (data) {\n      data.cordova = true;\n\n      Accounts.callLoginMethod({\n        methodArguments: [data],\n        userCallback: callback\n      });\n    }\n\n    if (typeof facebookConnectPlugin != \"undefined\" && Meteor.settings) {\n      facebookConnectPlugin.getLoginStatus( \n        function (response) { \n          if (response.status != \"connected\") {\n            facebookConnectPlugin.login(Meteor.settings.public.facebook.permissions,\n                fbLoginSuccess,\n                function (error) { console.log(\"\" + error) }\n            );\n          } else {\n            fbLoginSuccess(response);\n          }\n        },\n        function (error) { console.log(\"\" + error) }\n      );\n    } else {\n      Facebook.requestCredential(options, credentialRequestCompleteCallback);\n    }\n  };\n\n} else {\n\n  if (Meteor.settings && \n      Meteor.settings.facebook &&\n      Meteor.settings.facebook.appId &&\n      Meteor.settings.facebook.secret) {\n\n    ServiceConfiguration.configurations.remove({\n      service: \"facebook\"\n    });\n\n    ServiceConfiguration.configurations.insert({\n      service: \"facebook\",\n      appId: Meteor.settings.facebook.appId,\n      secret: Meteor.settings.facebook.secret\n    });\n\n    Accounts.addAutopublishFields({\n      // publish all fields including access token, which can legitimately\n      // be used from the client (if transmitted over ssl or on\n      // localhost). https://developers.facebook.com/docs/concepts/login/access-tokens-and-types/,\n      // \"Sharing of Access Tokens\"\n      forLoggedInUser: ['services.facebook'],\n      forOtherUsers: [\n        // https://www.facebook.com/help/167709519956542\n        'services.facebook.id', 'services.facebook.username', 'services.facebook.gender'\n      ]\n    });\n    \n  } else {\n    console.log(\"Meteor settings for accounts-facebook-cordova not configured correctly.\")\n  }\n}\n"]}